from flask import Flask, request
import requests
from bs4 import BeautifulSoup
import pandas as pd
import os
import re
import ftplib
import logging
from datetime import datetime, timedelta # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º datetime –∏ timedelta

app = Flask(__name__)
logging.basicConfig(level=logging.INFO)

# ========================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# ========================
url = "http://pingwinclub.ru/"
ftp_host = os.getenv("FTP_HOST")
ftp_user = os.getenv("FTP_USER")
ftp_pass = os.getenv("FTP_PASS")
ftp_path = os.getenv("FTP_PATH")
# ========================
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# ========================
def log(message):
    print(message)
# ========================
# –ü–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–∞
# ========================
def run_parser():
    log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–∞")
    try:
        response = requests.get(url)
        html = response.text
        log("‚úÖ HTML —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∞–π—Ç–∞: {e}")
        return

    soup = BeautifulSoup(html, "html.parser")
    rows = soup.select("tr.stat")
    data = []
    for row in rows:
        cols = row.find_all("td")
        if len(cols) < 5:
            continue
        name_tag = cols[2].find(class_="statname")
        name = name_tag.get_text(strip=True) if name_tag else cols[2].get_text(strip=True)
        rating = cols[3].get_text(strip=True)
        delta = cols[4].get_text(strip=True)
        last_participation = "-"
        stats_div = cols[1].find("div", class_="podrstat")
        if stats_div:
            stats_text = stats_div.get_text(strip=True)
            # –ò—â–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.yyyy –∏–ª–∏ dd.mm.yy
            match = re.search(r"–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—á–∞—Å—Ç–∏—è - ([\d\.]+)", stats_text)
            if match:
                last_participation = match.group(1)
        if last_participation == "-":
            if len(cols) > 5:
                possible_date = cols[5].get_text(strip=True)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–ª–µ–µ –æ–±—â–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã dd.mm.yyyy
                if re.fullmatch(r"\d{2}\.\d{2}\.\d{4}", possible_date):
                    last_participation = possible_date
            if len(cols) > 6 and last_participation == "-":
                possible_date = cols[6].get_text(strip=True)
                if re.fullmatch(r"\d{2}\.\d{2}\.\d{4}", possible_date):
                    last_participation = possible_date
        city = cols[7].get_text(strip=True) if len(cols) > 7 else "-"
        data.append([len(data) + 1, name, rating, delta, last_participation, city])

    df = pd.DataFrame(data, columns=["–ú–µ—Å—Ç–æ", "–ò–º—è", "–†–µ–π—Ç–∏–Ω–≥", "Œî –†–µ–π—Ç–∏–Ω–≥", "–ü–æ—Å–ª–µ–¥–Ω–µ–µ —É—á–∞—Å—Ç–∏–µ", "–ì–æ—Ä–æ–¥"])

    # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ ---
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–æ–ª–±–µ—Ü '–ü–æ—Å–ª–µ–¥–Ω–µ–µ —É—á–∞—Å—Ç–∏–µ' –≤ datetime, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –æ—à–∏–±–∫–∏
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã dd.mm.yyyy
    df['–ü–æ—Å–ª–µ–¥–Ω–µ–µ —É—á–∞—Å—Ç–∏–µ'] = pd.to_datetime(df['–ü–æ—Å–ª–µ–¥–Ω–µ–µ —É—á–∞—Å—Ç–∏–µ'], format='%d.%m.%Y', errors='coerce', dayfirst=True)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    today = datetime.today()
    # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É 3 –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥
    six_months_ago = today - timedelta(days=3*30) # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ 3 –º–µ—Å—è—Ü–∞

    # –§–∏–ª—å—Ç—Ä—É–µ–º DataFrame: –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ –¥–∞—Ç–∞ >= six_months_ago –∏ –¥–∞—Ç–∞ –∏–∑–≤–µ—Å—Ç–Ω–∞ (–Ω–µ NaT)
    df_filtered = df[df['–ü–æ—Å–ª–µ–¥–Ω–µ–µ —É—á–∞—Å—Ç–∏–µ'].notna() & (df['–ü–æ—Å–ª–µ–¥–Ω–µ–µ —É—á–∞—Å—Ç–∏–µ'] >= six_months_ago)]

    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Å—Ç–∞
    df_filtered = df_filtered.reset_index(drop=True)
    df_filtered['–ú–µ—Å—Ç–æ'] = df_filtered.index + 1

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    df_filtered['–ü–æ—Å–ª–µ–¥–Ω–µ–µ —É—á–∞—Å—Ç–∏–µ'] = df_filtered['–ü–æ—Å–ª–µ–¥–Ω–µ–µ —É—á–∞—Å—Ç–∏–µ'].dt.strftime('%d.%m.%Y')
    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò ---

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π DataFrame –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    df = df_filtered

    if not df.empty:
        latest_date = pd.to_datetime(df['–ü–æ—Å–ª–µ–¥–Ω–µ–µ —É—á–∞—Å—Ç–∏–µ'], format='%d.%m.%Y', errors='coerce').max()
        latest_date_str = latest_date.strftime("%d.%m.%Y") if not pd.isna(latest_date) else "-"
    else:
        latest_date_str = "-" # –ò–ª–∏ –¥—Ä—É–≥–∞—è —Å—Ç—Ä–æ–∫–∞, –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
    log(f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞ (–ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏): {latest_date_str}")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏)
    used_letters = set()
    for _, row in df.iterrows():
        name = row['–ò–º—è']
        if name:
            surname = name.split(" ")[0]
            if surname:
                first_letter = surname[0].upper()
                if first_letter.isalpha():
                    used_letters.add(first_letter)
    letters = [chr(c) for c in range(ord("–ê"), ord("–Ø") + 1)]
    filtered_letters = [l for l in letters if l in used_letters]
    half = len(filtered_letters) // 2
    first_row = filtered_letters[:half]
    second_row = filtered_letters[half:]

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–ê–ì–û–õ–û–í–ö–ê ---
    html_content = f"""
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>–†–µ–π—Ç–∏–Ω–≥ PingWinClub</title>
        <style>
            body {{
                font-family: Arial, sans-serif;
                margin: 20px;
                background-color: #f9f9f9;
                color: #333;
                line-height: 1.5;
            }}
            h1 {{
                text-align: center;
                color: #2c3e50;
                margin-bottom: 10px;
                font-size: 1.5em;
            }}
            h3 {{
                text-align: center;
                color: #777;
                margin-bottom: 20px;
                font-size: 1em;
            }}
            h4 {{
                margin-top: 20px;
                margin-bottom: 10px;
                font-size: 1em;
            }}
            .filters {{
                margin-bottom: 20px;
            }}
            .filter-row {{
                display: flex;
                flex-wrap: wrap;
                gap: 5px;
                margin-bottom: 10px;
            }}
            .filter-btn {{
                padding: 6px 10px;
                background: #2ecc71;
                color: white;
                cursor: pointer;
                border-radius: 4px;
                font-size: 0.9em;
                flex: 1 1 auto;
                text-align: center;
                min-width: 40px;
            }}
            .filter-btn:hover {{
                background: #27ae60;
            }}
            .alffilter {{
                padding: 6px 10px;
                background: #3498db;
                color: white;
                cursor: pointer;
                border-radius: 4px;
                font-size: 0.9em;
                flex: 1 1 auto;
                text-align: center;
                min-width: 30px;
            }}
            .alffilter:hover {{
                background: #2980b9;
            }}
            table {{
                border-collapse: collapse;
                width: 100%;
                background-color: white;
                box-shadow: 0 0 10px rgba(0,0,0,0.1);
                font-size: 0.9em;
            }}
            th, td {{
                border: 1px solid #ddd;
                padding: 8px;
                text-align: left;
            }}
            th {{
                background-color: #3498db;
                color: white;
            }}
            .centered {{
                text-align: center;
            }}
            tr:nth-child(even) {{
                background-color: #f2f2f2;
            }}
            tr:hover {{
                background-color: #e0e0e0;
            }}
        </style>
    </head>
    <body>
        <h1><a href="https://–ø–∏–Ω–≥–≤–∏–Ω–∫–ª—É–±.—Ä—Ñ/reitingi.html" target="_parent">–†–µ–π—Ç–∏–Ω–≥ PingWinClub</a></h1>
        <!-- –ò–∑–º–µ–Ω—ë–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ -->
        <h3>–ö–ª—É–±–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ 3 –º–µ—Å—è—Ü–∞</h3>
        <div class="filters">
            <h4>–ê–ª—Ñ–∞–≤–∏—Ç–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä:</h4>
            <div class="filter-row">
                <span class="alffilter" data-letter="–≤—Å–µ">–í–°–ï</span>
                {"".join(f'<span class="alffilter" data-letter="{l}">{l}</span>' for l in first_row)}
            </div>
            <div class="filter-row">
                {"".join(f'<span class="alffilter" data-letter="{l}">{l}</span>' for l in second_row)}
            </div>
            <h4 style="margin-top: 20px;">–§–∏–ª—å—Ç—Ä –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Ç—É—Ä–Ω–∏—Ä—É:</h4>
            <div class="filter-row">
                <span class="filter-btn" data-date="{latest_date_str}">–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç—É—Ä–Ω–∏—Ä: {latest_date_str}</span>
            </div>
        </div>
        <table id="myTable" border="1">
            <thead>
                <tr>
                    <th class="centered">‚Ññ</th>
                    <th>–ò–º—è</th>
                    <th class="centered">–†–µ–π—Ç–∏–Ω–≥</th>
                    <th class="centered">Œî</th>
                    <th>–ü–æ—Å–ª–µ–¥–Ω–µ–µ —É—á–∞—Å—Ç–∏–µ</th>
                    <th>–ì–æ—Ä–æ–¥</th>
                </tr>
            </thead>
            <tbody>
    """
    for _, row in df.iterrows(): # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π df
        rating = row['–†–µ–π—Ç–∏–Ω–≥']
        delta = row['Œî –†–µ–π—Ç–∏–Ω–≥']
        rating_style = 'style="color: darkgreen; font-weight: bold;"' if '+' in delta and delta not in ["+0", "+-0"] else ''
        if '-' in delta and delta not in ["-0", "+-0"]:
            rating_style = 'style="color: red; font-weight: bold;"'
        html_content += f"""
        <tr>
            <td class="centered">{row['–ú–µ—Å—Ç–æ']}</td>
            <td>{row['–ò–º—è']}</td>
            <td class="centered" {rating_style}>{rating}</td>
            <td class="centered">{delta}</td>
            <td class="last-activity">{row['–ü–æ—Å–ª–µ–¥–Ω–µ–µ —É—á–∞—Å—Ç–∏–µ']}</td>
            <td>{row['–ì–æ—Ä–æ–¥']}</td>
        </tr>
        """
    html_content += """
            </tbody>
        </table>
        <script>
            document.addEventListener("DOMContentLoaded", function () {
                const alffilters = document.querySelectorAll(".alffilter");
                const datefilters = document.querySelectorAll(".filter-btn");
                const rows = document.querySelectorAll("#myTable tbody tr");
                // –§–∏–ª—å—Ç—Ä –ø–æ —Ñ–∞–º–∏–ª–∏–∏
                alffilters.forEach(filter => {
                    filter.addEventListener("click", function () {
                        const letter = this.getAttribute("data-letter");
                        rows.forEach(row => {
                            const nameCell = row.querySelector("td:nth-child(2)");
                            if (!nameCell) return;
                            const surname = nameCell.textContent.trim().split(" ")[0];
                            const firstLetter = surname.charAt(0).toUpperCase();
                            if (letter === "–≤—Å–µ" || firstLetter === letter) {
                                row.style.display = "";
                            } else {
                                row.style.display = "none";
                            }
                        });
                    });
                });
                // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
                datefilters.forEach(filter => {
                    filter.addEventListener("click", function () {
                        const targetDate = this.getAttribute("data-date");
                        rows.forEach(row => {
                            const dateCell = row.querySelector("td.last-activity");
                            if (!dateCell) return;
                            const rowDate = dateCell.textContent.trim();
                            if (targetDate === "all" || rowDate === targetDate) {
                                row.style.display = "";
                            } else {
                                row.style.display = "none";
                            }
                        });
                    });
                });
            });
        </script>
    </body>
    </html>
    """
    local_html_path = "rating_full.html"
    try:
        with open(local_html_path, "w", encoding="utf-8") as f:
            f.write(html_content)
        log(f"‚úÖ HTML —Å–æ–∑–¥–∞–Ω –ª–æ–∫–∞–ª—å–Ω–æ: {local_html_path}")
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ HTML: {e}")
        return

    # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ FTP
    log("üì§ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –Ω–∞ FTP")
    try:
        with ftplib.FTP(ftp_host) as ftp:
            ftp.login(user=ftp_user, passwd=ftp_pass)
            log("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ FTP")
            ftp.cwd(ftp_path)
            log(f"üìÅ –ü–µ—Ä–µ—à–ª–∏ –≤ –ø–∞–ø–∫—É: {ftp_path}")
            with open(local_html_path, "rb") as file:
                ftp.storbinary(f"STOR rating_full.html", file)
        log(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ FTP")
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ FTP: {e}")
# ========================
# Flask –º–∞—Ä—à—Ä—É—Ç—ã
# ========================
@app.route("/")
def index():
    return "‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ /run –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞."

@app.route("/run")
def run():
    log("üîî –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞")
    run_parser()
    return "‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω"
# ========================
# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
# ========================
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8080)
