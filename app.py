import requests
from bs4 import BeautifulSoup
import pandas as pd
import os
import re
import ftplib
import time
from datetime import datetime, timezone, timedelta

# ========================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# ========================
url = "http://pingwinclub.ru/"
ftp_host = os.getenv("FTP_HOST")
ftp_user = os.getenv("FTP_USER")
ftp_pass = os.getenv("FTP_PASS")
ftp_path = os.getenv("FTP_PATH")

# ========================
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# ========================
def log(message):
    print(message)

# ========================
# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
# ========================
def run_parser():
    log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–∞")
    try:
        response = requests.get(url)
        html = response.text
        log("‚úÖ HTML —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∞–π—Ç–∞: {e}")
        return

    soup = BeautifulSoup(html, "html.parser")
    rows = soup.select("tr.stat")
    data = []
    for row in rows:
        cols = row.find_all("td")
        if len(cols) < 5:
            continue
        name_tag = cols[2].find(class_="statname")
        name = name_tag.get_text(strip=True) if name_tag else cols[2].get_text(strip=True)
        rating = cols[3].get_text(strip=True)
        delta = cols[4].get_text(strip=True)
        last_participation = "-"
        stats_div = cols[1].find("div", class_="podrstat")
        if stats_div:
            stats_text = stats_div.get_text(strip=True)
            match = re.search(r"–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—á–∞—Å—Ç–∏—è - ([\d\.]+)", stats_text)
            if match:
                last_participation = match.group(1)
        if last_participation == "-":
            if len(cols) > 5:
                possible_date = cols[5].get_text(strip=True)
                if re.fullmatch(r"\d{2}\.\d{2}\.\d{4}", possible_date):
                    last_participation = possible_date
            if len(cols) > 6 and last_participation == "-":
                possible_date = cols[6].get_text(strip=True)
                if re.fullmatch(r"\d{2}\.\d{2}\.\d{4}", possible_date):
                    last_participation = possible_date
        city = cols[7].get_text(strip=True) if len(cols) > 7 else "-"
        data.append([len(data) + 1, name, rating, delta, last_participation, city])

    df = pd.DataFrame(data, columns=["–ú–µ—Å—Ç–æ", "–ò–º—è", "–†–µ–π—Ç–∏–Ω–≥", "Œî –†–µ–π—Ç–∏–Ω–≥", "–ü–æ—Å–ª–µ–¥–Ω–µ–µ —É—á–∞—Å—Ç–∏–µ", "–ì–æ—Ä–æ–¥"])
    df['–ü–æ—Å–ª–µ–¥–Ω–µ–µ —É—á–∞—Å—Ç–∏–µ'] = df['–ü–æ—Å–ª–µ–¥–Ω–µ–µ —É—á–∞—Å—Ç–∏–µ'].str.replace(r'\s\d{2}:\d{2}:\d{4}', '', regex=True)

    latest_date = df[df['–ü–æ—Å–ª–µ–¥–Ω–µ–µ —É—á–∞—Å—Ç–∏–µ'] != "-"]['–ü–æ—Å–ª–µ–¥–Ω–µ–µ —É—á–∞—Å—Ç–∏–µ']
    if not latest_date.empty:
        latest_date = pd.to_datetime(latest_date, format='%d.%m.%Y', errors='coerce').max()
        latest_date_str = latest_date.strftime("%d.%m.%Y") if not pd.isna(latest_date) else "-"
    else:
        latest_date_str = "-"
    log(f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞: {latest_date_str}")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML (–æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    used_letters = set()
    for _, row in df.iterrows():
        name = row['–ò–º—è']
        if name:
            surname = name.split(" ")[0]
            if surname:
                first_letter = surname[0].upper()
                if first_letter.isalpha():
                    used_letters.add(first_letter)

    letters = [chr(c) for c in range(ord("–ê"), ord("–Ø") + 1)]
    filtered_letters = [l for l in letters if l in used_letters]
    half = len(filtered_letters) // 2
    first_row = filtered_letters[:half]
    second_row = filtered_letters[half:]

    html_content = f"""
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <title>–†–µ–π—Ç–∏–Ω–≥ PingWinClub</title>
        <style>
            /* —Å—Ç–∏–ª–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π */
        </style>
    </head>
    <body>
        <h1>–†–µ–π—Ç–∏–Ω–≥ PingWinClub</h1>
        <!-- HTML-–∫–æ–Ω—Ç–µ–Ω—Ç –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π -->
    </body>
    </html>
    """

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ HTML
    local_html_path = "rating_full.html"
    try:
        with open(local_html_path, "w", encoding="utf-8") as f:
            f.write(html_content)
        log(f"‚úÖ HTML —Å–æ–∑–¥–∞–Ω –ª–æ–∫–∞–ª—å–Ω–æ: {local_html_path}")
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ HTML: {e}")
        return

    # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ FTP
    log("üì§ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –Ω–∞ FTP")
    try:
        with ftplib.FTP(ftp_host) as ftp:
            ftp.login(user=ftp_user, passwd=ftp_pass)
            log("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ FTP")
            ftp.cwd(ftp_path)
            log(f"üìÅ –ü–µ—Ä–µ—à–ª–∏ –≤ –ø–∞–ø–∫—É: {ftp_path}")
            with open(local_html_path, "rb") as file:
                ftp.storbinary(f"STOR rating_full.html", file)
        log(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ FTP: https://raketka66.ru/rating_full.html  ")
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ FTP: {e}")

# ========================
# –§—É–Ω–∫—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ –Ω—É–∂–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
# ========================
def wait_until_next_run():
    tz = timezone(timedelta(hours=5))  # UTC+5 ‚Äî –ú–æ—Å–∫–≤–∞
    now = datetime.now(tz)
    current_time = now.strftime("%H:%M")

    if current_time < "18:00":
        next_run = datetime.combine(now.date(), datetime.strptime("18:00", "%H:%M").time(), tzinfo=tz)
    elif current_time < "22:30":
        next_run = datetime.combine(now.date(), datetime.strptime("22:30", "%H:%M").time(), tzinfo=tz)
    else:
        next_run = datetime.combine(now.date() + timedelta(days=1), datetime.strptime("18:00", "%H:%M").time(), tzinfo=tz)

    wait_seconds = (next_run - now).total_seconds()
    log(f"üí§ –û–∂–∏–¥–∞–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞: {next_run.strftime('%H:%M')}")
    return wait_seconds

# ========================
# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
# ========================
def main():
    log("üü¢ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω")
    while True:
        run_parser()
        wait_time = wait_until_next_run()
        log(f"üí§ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {int(wait_time // 3600)} —á. {int((wait_time % 3600) // 60)} –º–∏–Ω.")
        time.sleep(wait_time)

if __name__ == "__main__":
    main()
