# parser.py ‚Äî –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ Flask, —Å —Ä—É—á–Ω—ã–º –∑–∞–ø—É—Å–∫–æ–º
import requests
from bs4 import BeautifulSoup
import pandas as pd
import os
import re
import ftplib
from datetime import datetime, timedelta
import logging

# ========================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# ========================
URL = "http://pingwinclub.ru/"
FTP_HOST = os.getenv("FTP_HOST")
FTP_USER = os.getenv("FTP_USER")
FTP_PASS = os.getenv("FTP_PASS")
FTP_PATH = os.getenv("FTP_PATH")
LOCAL_HTML_PATH = "rating_full.html"

# ========================
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# ========================
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
log = logging.info

# ========================
# –ü–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–∞
# ========================
def run_parser():
    log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–∞")
    
    # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º HTML
    try:
        response = requests.get(URL, timeout=10)
        response.raise_for_status()
        html = response.text
        log("‚úÖ HTML —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∞–π—Ç–∞: {e}")
        return
    finally:
        del response  # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å

    # 2. –ü–∞—Ä—Å–∏–º —Å –ø–æ–º–æ—â—å—é BeautifulSoup
    try:
        soup = BeautifulSoup(html, "html.parser")
        rows = soup.select("tr.stat")
        data = []
        for row in rows:
            cols = row.find_all("td")
            if len(cols) < 5:
                continue
            name_tag = cols[2].find(class_="statname")
            name = name_tag.get_text(strip=True) if name_tag else cols[2].get_text(strip=True)
            rating = cols[3].get_text(strip=True)
            delta = cols[4].get_text(strip=True)
            last_participation = "-"
            stats_div = cols[1].find("div", class_="podrstat")
            if stats_div:
                stats_text = stats_div.get_text(strip=True)
                match = re.search(r"–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—á–∞—Å—Ç–∏—è - ([\d\.]+)", stats_text)
                if match:
                    last_participation = match.group(1)
            if last_participation == "-" and len(cols) > 5:
                possible_date = cols[5].get_text(strip=True)
                if re.fullmatch(r"\d{2}\.\d{2}\.\d{4}", possible_date):
                    last_participation = possible_date
            if last_participation == "-" and len(cols) > 6:
                possible_date = cols[6].get_text(strip=True)
                if re.fullmatch(r"\d{2}\.\d{2}\.\d{4}", possible_date):
                    last_participation = possible_date
            city = cols[7].get_text(strip=True) if len(cols) > 7 else "-"
            data.append([len(data) + 1, name, rating, delta, last_participation, city])
        del soup, html  # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return

    # 3. –°–æ–∑–¥–∞—ë–º DataFrame
    df = pd.DataFrame(data, columns=["–ú–µ—Å—Ç–æ", "–ò–º—è", "–†–µ–π—Ç–∏–Ω–≥", "Œî –†–µ–π—Ç–∏–Ω–≥", "–ü–æ—Å–ª–µ–¥–Ω–µ–µ —É—á–∞—Å—Ç–∏–µ", "–ì–æ—Ä–æ–¥"])
    del data  # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–ø–∏—Å–æ–∫

    # 4. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞)
    try:
        df['–ü–æ—Å–ª–µ–¥–Ω–µ–µ —É—á–∞—Å—Ç–∏–µ'] = pd.to_datetime(
            df['–ü–æ—Å–ª–µ–¥–Ω–µ–µ —É—á–∞—Å—Ç–∏–µ'],
            format='%d.%m.%Y',
            errors='coerce',
            dayfirst=True
        )
        today = datetime.today()
        three_months_ago = today - timedelta(days=90)
        df_filtered = df[df['–ü–æ—Å–ª–µ–¥–Ω–µ–µ —É—á–∞—Å—Ç–∏–µ'].notna() & (df['–ü–æ—Å–ª–µ–¥–Ω–µ–µ —É—á–∞—Å—Ç–∏–µ'] >= three_months_ago)]
        df_filtered = df_filtered.sort_values(by='–ü–æ—Å–ª–µ–¥–Ω–µ–µ —É—á–∞—Å—Ç–∏–µ', ascending=False)
        df_filtered = df_filtered.reset_index(drop=True)
        df_filtered['–ú–µ—Å—Ç–æ'] = df_filtered.index + 1
        df_filtered['–ü–æ—Å–ª–µ–¥–Ω–µ–µ —É—á–∞—Å—Ç–∏–µ'] = df_filtered['–ü–æ—Å–ª–µ–¥–Ω–µ–µ —É—á–∞—Å—Ç–∏–µ'].dt.strftime('%d.%m.%Y')
        latest_date = df_filtered['–ü–æ—Å–ª–µ–¥–Ω–µ–µ —É—á–∞—Å—Ç–∏–µ'].max() if not df_filtered.empty else "-"
        log(f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞ (–ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏): {latest_date}")
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç: {e}")
        return
    finally:
        del df  # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π DataFrame

    # 5. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ HTML
    try:
        used_letters = set()
        for _, row in df_filtered.iterrows():
            name = row['–ò–º—è']
            if name:
                surname = name.split(" ")[0]
                if surname and surname[0].isalpha():
                    used_letters.add(surname[0].upper())
        letters = [chr(c) for c in range(ord("–ê"), ord("–Ø") + 1)]
        filtered_letters = sorted([l for l in letters if l in used_letters])
        half = len(filtered_letters) // 2
        first_row = filtered_letters[:half]
        second_row = filtered_letters[half:]

        html_content = f"""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–†–µ–π—Ç–∏–Ω–≥ PingWinClub</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 20px; background-color: #f9f9f9; color: #333; line-height: 1.5; }}
        h1 {{ text-align: center; color: #2c3e50; margin-bottom: 10px; font-size: 1.5em; }}
        h3 {{ text-align: center; color: #777; margin-bottom: 20px; font-size: 1em; }}
        h4 {{ margin-top: 20px; margin-bottom: 10px; font-size: 1em; }}
        .filters {{ margin-bottom: 20px; }}
        .filter-row {{ display: flex; flex-wrap: wrap; gap: 5px; margin-bottom: 10px; }}
        .filter-btn {{ padding: 6px 10px; background: #2ecc71; color: white; cursor: pointer; border-radius: 4px; font-size: 0.9em; flex: 1 1 auto; text-align: center; min-width: 40px; }}
        .filter-btn:hover {{ background: #27ae60; }}
        .alffilter {{ padding: 6px 10px; background: #3498db; color: white; cursor: pointer; border-radius: 4px; font-size: 0.9em; flex: 1 1 auto; text-align: center; min-width: 30px; }}
        .alffilter:hover {{ background: #2980b9; }}
        table {{ border-collapse: collapse; width: 100%; background-color: white; box-shadow: 0 0 10px rgba(0,0,0,0.1); font-size: 0.9em; }}
        th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
        th {{ background-color: #3498db; color: white; }}
        .centered {{ text-align: center; }}
        tr:nth-child(even) {{ background-color: #f2f2f2; }}
        tr:hover {{ background-color: #e0e0e0; }}
    </style>
</head>
<body>
    <h1><a href="https://–ø–∏–Ω–≥–≤–∏–Ω–∫–ª—É–±.—Ä—Ñ/reitingi.html" target="_parent">–†–µ–π—Ç–∏–Ω–≥ PingWinClub</a></h1>
    <h3>–ö–ª—É–±–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ 3 –º–µ—Å—è—Ü–∞</h3>
    <div class="filters">
        <h4>–ê–ª—Ñ–∞–≤–∏—Ç–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä:</h4>
        <div class="filter-row">
            <span class="alffilter" data-letter="–≤—Å–µ">–í–°–ï</span>
            {"".join(f'<span class="alffilter" data-letter="{l}">{l}</span>' for l in first_row)}
        </div>
        <div class="filter-row">
            {"".join(f'<span class="alffilter" data-letter="{l}">{l}</span>' for l in second_row)}
        </div>
        <h4 style="margin-top: 20px;">–§–∏–ª—å—Ç—Ä –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Ç—É—Ä–Ω–∏—Ä—É:</h4>
        <div class="filter-row">
            <span class="filter-btn" data-date="{latest_date}">–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç—É—Ä–Ω–∏—Ä: {latest_date}</span>
        </div>
    </div>
    <table id="myTable" border="1">
        <thead>
            <tr>
                <th class="centered">‚Ññ</th>
                <th>–ò–º—è</th>
                <th class="centered">–†–µ–π—Ç–∏–Ω–≥</th>
                <th class="centered">Œî</th>
                <th>–ü–æ—Å–ª–µ–¥–Ω–µ–µ —É—á–∞—Å—Ç–∏–µ</th>
                <th>–ì–æ—Ä–æ–¥</th>
            </tr>
        </thead>
        <tbody>
        """
        for _, row in df_filtered.iterrows():
            rating = row['–†–µ–π—Ç–∏–Ω–≥']
            delta = row['Œî –†–µ–π—Ç–∏–Ω–≥']
            rating_style = 'style="color: darkgreen; font-weight: bold;"' if '+' in delta and delta not in ["+0", "+-0"] else ''
            if '-' in delta and delta not in ["-0", "+-0"]:
                rating_style = 'style="color: red; font-weight: bold;"'
            html_content += f"""
            <tr>
                <td class="centered">{row['–ú–µ—Å—Ç–æ']}</td>
                <td>{row['–ò–º—è']}</td>
                <td class="centered" {rating_style}>{rating}</td>
                <td class="centered">{delta}</td>
                <td class="last-activity">{row['–ü–æ—Å–ª–µ–¥–Ω–µ–µ —É—á–∞—Å—Ç–∏–µ']}</td>
                <td>{row['–ì–æ—Ä–æ–¥']}</td>
            </tr>
            """
        html_content += """
        </tbody>
    </table>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const alffilters = document.querySelectorAll(".alffilter");
            const datefilters = document.querySelectorAll(".filter-btn");
            const rows = document.querySelectorAll("#myTable tbody tr");
            alffilters.forEach(filter => {
                filter.addEventListener("click", function () {
                    const letter = this.getAttribute("data-letter");
                    rows.forEach(row => {
                        const nameCell = row.querySelector("td:nth-child(2)");
                        if (!nameCell) return;
                        const surname = nameCell.textContent.trim().split(" ")[0];
                        const firstLetter = surname ? surname.charAt(0).toUpperCase() : '';
                        if (letter === "–≤—Å–µ" || firstLetter === letter) {
                            row.style.display = "";
                        } else {
                            row.style.display = "none";
                        }
                    });
                });
            });
            datefilters.forEach(filter => {
                filter.addEventListener("click", function () {
                    const targetDate = this.getAttribute("data-date");
                    rows.forEach(row => {
                        const dateCell = row.querySelector("td.last-activity");
                        if (!dateCell) return;
                        const rowDate = dateCell.textContent.trim();
                        if (targetDate === "all" || rowDate === targetDate) {
                            row.style.display = "";
                        } else {
                            row.style.display = "none";
                        }
                    });
                });
            });
        });
    </script>
</body>
</html>
        """
        with open(LOCAL_HTML_PATH, "w", encoding="utf-8") as f:
            f.write(html_content)
        log(f"‚úÖ HTML —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {LOCAL_HTML_PATH}")
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML: {e}")
        return
    finally:
        del df_filtered  # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º DataFrame

    # 6. FTP –∑–∞–≥—Ä—É–∑–∫–∞
    log("üì§ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –Ω–∞ FTP")
    try:
        with ftplib.FTP(FTP_HOST) as ftp:
            ftp.login(user=FTP_USER, passwd=FTP_PASS)
            log("‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ FTP")
            ftp.cwd(FTP_PATH)
            log(f"üìÅ –ü–µ—Ä–µ—à–ª–∏ –≤ –ø–∞–ø–∫—É: {FTP_PATH}")
            with open(LOCAL_HTML_PATH, "rb") as file:
                ftp.storbinary("STOR rating_full.html", file)
        log("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ FTP")
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ FTP: {e}")
        return

# ========================
# –ó–∞–ø—É—Å–∫
# ========================
if __name__ == "__main__":
    run_parser()
